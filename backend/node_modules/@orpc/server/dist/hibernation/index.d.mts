import { StandardRPCJsonSerializerOptions } from '@orpc/client/standard';
import { g as StandardHandlerPlugin, e as StandardHandlerOptions } from '../shared/server.DBCUJijK.mjs';
import { HibernationEventIterator } from '@orpc/standard-server';
export { HibernationEventIterator, HibernationEventIteratorCallback } from '@orpc/standard-server';
import { C as Context, R as Router } from '../shared/server.B4BGqy3Y.mjs';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/shared';

interface EncodeHibernationRPCEventOptions extends StandardRPCJsonSerializerOptions {
    /**
     * The type of event, each type corresponds a different operation
     *
     * - 'message' = 'yield'
     * - 'error' = 'throw'
     * - 'done' = 'return'
     *
     * @default 'message'
     */
    event?: 'message' | 'error' | 'done';
}
/**
 * Encodes a Hibernation RPC Event
 *
 * @see {@link https://orpc.unnoq.com/docs/plugins/hibernation Hibernation Plugin}
 */
declare function encodeHibernationRPCEvent(id: string, payload: unknown, options?: EncodeHibernationRPCEventOptions): string;

interface HibernationPluginContext {
    iterator?: HibernationEventIterator<any>;
}
/**
 * Enable Hibernation APIs
 *
 * @see {@link https://orpc.unnoq.com/docs/plugins/hibernation Hibernation Plugin}
 */
declare class HibernationPlugin<T extends Context> implements StandardHandlerPlugin<T> {
    readonly CONTEXT_SYMBOL: symbol;
    order: number;
    init(options: StandardHandlerOptions<T>, _router: Router<any, T>): void;
}

export { HibernationPlugin, encodeHibernationRPCEvent };
export type { EncodeHibernationRPCEventOptions, HibernationPluginContext };
