import Stream, { Readable } from 'node:stream';
import { StandardBody, StandardHeaders, StandardLazyRequest, StandardResponse } from '@orpc/standard-server';
import { ToNodeHttpBodyOptions } from '@orpc/standard-server-node';
export { ToEventStreamOptions, toAbortSignal, toEventStream } from '@orpc/standard-server-node';
import { ToEventIteratorOptions as ToEventIteratorOptions$1 } from '@orpc/standard-server-fetch';

interface ToEventIteratorOptions extends ToEventIteratorOptions$1 {
}
declare function toEventIterator(body: string | undefined, options?: ToEventIteratorOptions): AsyncIteratorObject<unknown | void, unknown | void, void> & AsyncGenerator<unknown | void, unknown | void, void>;

interface APIGatewayProxyEventHeaders {
    [name: string]: string | undefined;
}
interface APIGatewayProxyEventPathParameters {
    [name: string]: string | undefined;
}
interface APIGatewayProxyEventQueryStringParameters {
    [name: string]: string | undefined;
}
interface APIGatewayProxyEventStageVariables {
    [name: string]: string | undefined;
}
interface APIGatewayProxyEventV2 {
    version: string;
    routeKey: string;
    rawPath: string;
    rawQueryString: string;
    cookies?: string[];
    headers: APIGatewayProxyEventHeaders;
    queryStringParameters?: APIGatewayProxyEventQueryStringParameters;
    requestContext: {
        domainName: string;
        http: {
            method: string;
            path: string;
            protocol: string;
        };
    };
    body?: string;
    pathParameters?: APIGatewayProxyEventPathParameters;
    isBase64Encoded: boolean;
    stageVariables?: APIGatewayProxyEventStageVariables;
}

interface ToStandardBodyOptions extends ToEventIteratorOptions {
}
declare function toStandardBody(event: APIGatewayProxyEventV2, options?: ToStandardBodyOptions): Promise<StandardBody>;
interface ToLambdaBodyOptions extends ToNodeHttpBodyOptions {
}
declare function toLambdaBody(standardBody: StandardBody, standardHeaders: StandardHeaders, options?: ToLambdaBodyOptions): [body: undefined | string | Readable, headers: StandardHeaders];

declare function toStandardHeaders(headers: APIGatewayProxyEventHeaders, cookies: string[] | undefined): StandardHeaders;
declare function toLambdaHeaders(standard: StandardHeaders): [headers: APIGatewayProxyEventHeaders, setCookies: string[]];

declare function toStandardLazyRequest(event: APIGatewayProxyEventV2, responseStream: Stream.Writable): StandardLazyRequest;

interface SendStandardResponseOptions extends ToLambdaBodyOptions {
}
declare function sendStandardResponse(responseStream: Stream.Writable, standardResponse: StandardResponse, options?: SendStandardResponseOptions): Promise<void>;

declare function toStandardUrl(event: APIGatewayProxyEventV2): URL;

type ResponseStream = Stream.Writable;

export { sendStandardResponse, toEventIterator, toLambdaBody, toLambdaHeaders, toStandardBody, toStandardHeaders, toStandardLazyRequest, toStandardUrl };
export type { APIGatewayProxyEventHeaders, APIGatewayProxyEventPathParameters, APIGatewayProxyEventQueryStringParameters, APIGatewayProxyEventStageVariables, APIGatewayProxyEventV2, ResponseStream, SendStandardResponseOptions, ToEventIteratorOptions, ToLambdaBodyOptions, ToStandardBodyOptions };
