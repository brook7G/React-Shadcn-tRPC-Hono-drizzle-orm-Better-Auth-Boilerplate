import { MaybeOptionalOptions } from '@orpc/shared';
import { C as Context, R as Router } from '../../shared/server.B4BGqy3Y.js';
import { f as StandardHandler } from '../../shared/server.DPIFWpxG.js';
import { HandleStandardServerPeerMessageOptions } from '../standard-peer/index.js';
import { S as StandardRPCHandlerOptions } from '../../shared/server.COL12UTb.js';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/standard-server-peer';
import '../../shared/server.DNtJ-p60.js';
import '@orpc/client/standard';
import '../../shared/server.Cb6yD7DZ.js';

interface ServerWebSocket {
    send(message: string | ArrayBufferLike | Uint8Array): number;
}
declare class BunWsHandler<T extends Context> {
    private readonly standardHandler;
    private readonly peers;
    constructor(standardHandler: StandardHandler<T>);
    message(ws: ServerWebSocket, message: string | ArrayBufferView, ...rest: MaybeOptionalOptions<HandleStandardServerPeerMessageOptions<T>>): Promise<void>;
    close(ws: ServerWebSocket): void;
}

/**
 * RPC Handler for Bun WS adapter
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket Websocket Adapter Docs}
 */
declare class RPCHandler<T extends Context> extends BunWsHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<StandardRPCHandlerOptions<T>>);
}

export { BunWsHandler, RPCHandler };
export type { ServerWebSocket };
