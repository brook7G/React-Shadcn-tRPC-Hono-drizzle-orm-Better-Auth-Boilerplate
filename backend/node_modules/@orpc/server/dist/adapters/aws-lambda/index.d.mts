import { MaybeOptionalOptions } from '@orpc/shared';
import { SendStandardResponseOptions, APIGatewayProxyEventV2, ResponseStream } from '@orpc/standard-server-aws-lambda';
import { C as Context, R as Router } from '../../shared/server.B4BGqy3Y.mjs';
import { f as StandardHandler } from '../../shared/server.DBCUJijK.mjs';
import { F as FriendlyStandardHandleOptions } from '../../shared/server.CVKCo60T.mjs';
import { S as StandardRPCHandlerOptions } from '../../shared/server.Ck-gOLzq.mjs';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/client/standard';
import '../../shared/server.DzV1hr3z.mjs';

interface AwsLambdaHandlerOptions extends SendStandardResponseOptions {
}
type AwsLambdaHandleResult = {
    matched: true;
} | {
    matched: false;
};
declare class AwsLambdaHandler<T extends Context> {
    private readonly standardHandler;
    private readonly sendStandardResponseOptions;
    constructor(standardHandler: StandardHandler<T>, options?: AwsLambdaHandlerOptions);
    handle(event: APIGatewayProxyEventV2, responseStream: ResponseStream, ...rest: MaybeOptionalOptions<FriendlyStandardHandleOptions<T>>): Promise<AwsLambdaHandleResult>;
}

type RPCHandlerOptions<T extends Context> = AwsLambdaHandlerOptions & StandardRPCHandlerOptions<T> & {
    /**
     * Enables or disables the StrictGetMethodPlugin.
     *
     * @default true
     */
    strictGetMethodPluginEnabled?: boolean;
};
/**
 * RPC Handler for AWS Lambda.
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/http HTTP Adapter Docs}
 */
declare class RPCHandler<T extends Context> extends AwsLambdaHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<RPCHandlerOptions<T>>);
}

export { AwsLambdaHandler, RPCHandler };
export type { AwsLambdaHandleResult, AwsLambdaHandlerOptions, RPCHandlerOptions };
