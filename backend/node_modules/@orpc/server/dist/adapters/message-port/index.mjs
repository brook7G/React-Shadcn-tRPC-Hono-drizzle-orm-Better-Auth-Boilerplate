import { postMessagePortMessage, onMessagePortMessage, onMessagePortClose } from '@orpc/client/message-port';
import { resolveMaybeOptionalOptions } from '@orpc/shared';
import { ServerPeer } from '@orpc/standard-server-peer';
import { c as createServerPeerHandleRequestFn } from '../../shared/server.UVMTOWrk.mjs';
import '@orpc/client';
import '@orpc/standard-server';
import '@orpc/contract';
import { b as StandardRPCHandler } from '../../shared/server.Bxx6tqNe.mjs';
import '@orpc/client/standard';
import '../../shared/server.DZ5BIITo.mjs';
import '../../shared/server.Ds4HPpvH.mjs';

class MessagePortHandler {
  constructor(standardHandler) {
    this.standardHandler = standardHandler;
  }
  upgrade(port, ...rest) {
    const peer = new ServerPeer((message) => {
      return postMessagePortMessage(port, message);
    });
    onMessagePortMessage(port, async (message) => {
      await peer.message(
        message,
        createServerPeerHandleRequestFn(this.standardHandler, resolveMaybeOptionalOptions(rest))
      );
    });
    onMessagePortClose(port, () => {
      peer.close();
    });
  }
}

class RPCHandler extends MessagePortHandler {
  constructor(router, options = {}) {
    super(new StandardRPCHandler(router, options));
  }
}

export { MessagePortHandler, RPCHandler };
