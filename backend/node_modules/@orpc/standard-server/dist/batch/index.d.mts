import { S as StandardHeaders, c as StandardRequest, e as StandardResponse } from '../shared/standard-server.BD8Sg1A5.mjs';
import { Promisable } from '@orpc/shared';

interface ToBatchRequestOptions {
    url: URL;
    method: 'GET' | 'POST';
    headers: StandardHeaders;
    requests: readonly StandardRequest[];
}
declare function toBatchRequest(options: ToBatchRequestOptions): StandardRequest;
declare function parseBatchRequest(request: StandardRequest): StandardRequest[];

type BatchResponseMode = 'streaming' | 'buffered';
interface BatchResponseBodyItem extends StandardResponse {
    index: number;
}
interface ToBatchResponseOptions extends StandardResponse {
    body: AsyncIteratorObject<BatchResponseBodyItem>;
    /**
     * @default 'streaming'
     */
    mode?: BatchResponseMode;
}
declare function toBatchResponse(options: ToBatchResponseOptions): Promisable<StandardResponse>;
declare function parseBatchResponse(response: StandardResponse): AsyncGenerator<BatchResponseBodyItem>;

declare function toBatchAbortSignal(signals: readonly (AbortSignal | undefined)[]): AbortSignal | undefined;

export { parseBatchRequest, parseBatchResponse, toBatchAbortSignal, toBatchRequest, toBatchResponse };
export type { BatchResponseBodyItem, BatchResponseMode, ToBatchRequestOptions, ToBatchResponseOptions };
