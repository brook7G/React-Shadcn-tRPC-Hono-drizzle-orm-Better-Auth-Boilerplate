import { readAsBuffer } from '@orpc/shared';
import { ClientPeer } from '@orpc/standard-server-peer';
import { c as StandardRPCLink } from '../../shared/client.DHUDQ0GG.mjs';
import '@orpc/standard-server';
import '../../shared/client.DVVKXLEa.mjs';
import '@orpc/standard-server-fetch';

const WEBSOCKET_CONNECTING = 0;
class LinkWebsocketClient {
  peer;
  constructor(options) {
    const untilOpen = new Promise((resolve) => {
      if (options.websocket.readyState === WEBSOCKET_CONNECTING) {
        options.websocket.addEventListener("open", () => {
          resolve();
        }, { once: true });
      } else {
        resolve();
      }
    });
    this.peer = new ClientPeer(async (message) => {
      await untilOpen;
      return options.websocket.send(message);
    });
    options.websocket.addEventListener("message", async (event) => {
      const message = event.data instanceof Blob ? await readAsBuffer(event.data) : event.data;
      this.peer.message(message);
    });
    options.websocket.addEventListener("close", () => {
      this.peer.close();
    });
  }
  async call(request, _options, _path, _input) {
    const response = await this.peer.request(request);
    return { ...response, body: () => Promise.resolve(response.body) };
  }
}

class RPCLink extends StandardRPCLink {
  constructor(options) {
    const linkClient = new LinkWebsocketClient(options);
    super(linkClient, { ...options, url: "orpc://localhost" });
  }
}

export { LinkWebsocketClient, RPCLink };
