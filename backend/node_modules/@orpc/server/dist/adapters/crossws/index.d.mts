import { MaybeOptionalOptions } from '@orpc/shared';
import { Peer, Message } from 'crossws';
import { C as Context, R as Router } from '../../shared/server.B4BGqy3Y.mjs';
import { f as StandardHandler } from '../../shared/server.DBCUJijK.mjs';
import { HandleStandardServerPeerMessageOptions } from '../standard-peer/index.mjs';
import { S as StandardRPCHandlerOptions } from '../../shared/server.Ck-gOLzq.mjs';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/standard-server-peer';
import '../../shared/server.CVKCo60T.mjs';
import '@orpc/client/standard';
import '../../shared/server.DzV1hr3z.mjs';

declare class experimental_CrosswsHandler<T extends Context> {
    private readonly standardHandler;
    private readonly peers;
    constructor(standardHandler: StandardHandler<T>);
    message(ws: Pick<Peer, 'send'>, message: Pick<Message, 'rawData' | 'uint8Array'>, ...rest: MaybeOptionalOptions<HandleStandardServerPeerMessageOptions<T>>): Promise<void>;
    close(ws: Pick<Peer, 'send'>): void;
}

/**
 * RPC Handler for Crossws adapter
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket Websocket Adapter Docs}
 */
declare class experimental_RPCHandler<T extends Context> extends experimental_CrosswsHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<StandardRPCHandlerOptions<T>>);
}

export { experimental_CrosswsHandler, experimental_RPCHandler };
