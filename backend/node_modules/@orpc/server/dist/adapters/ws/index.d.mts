import { MaybeOptionalOptions } from '@orpc/shared';
import { WebSocket } from 'ws';
import { C as Context, R as Router } from '../../shared/server.B4BGqy3Y.mjs';
import { f as StandardHandler } from '../../shared/server.DBCUJijK.mjs';
import { HandleStandardServerPeerMessageOptions } from '../standard-peer/index.mjs';
import { S as StandardRPCHandlerOptions } from '../../shared/server.Ck-gOLzq.mjs';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/standard-server-peer';
import '../../shared/server.CVKCo60T.mjs';
import '@orpc/client/standard';
import '../../shared/server.DzV1hr3z.mjs';

declare class WsHandler<T extends Context> {
    private readonly standardHandler;
    constructor(standardHandler: StandardHandler<T>);
    upgrade(ws: Pick<WebSocket, 'addEventListener' | 'send'>, ...rest: MaybeOptionalOptions<HandleStandardServerPeerMessageOptions<T>>): Promise<void>;
}

/**
 * RPC Handler for ws (node ws) adapter
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket Websocket Adapter Docs}
 */
declare class RPCHandler<T extends Context> extends WsHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<StandardRPCHandlerOptions<T>>);
}

export { RPCHandler, WsHandler };
