import { StandardRPCJsonSerializerOptions } from '@orpc/client/standard';
import { b as AnyRouter, C as Context, R as Router } from './server.B4BGqy3Y.js';
import { i as StandardMatcher, h as StandardMatchResult, e as StandardHandlerOptions, f as StandardHandler } from './server.DPIFWpxG.js';
import { HTTPPath } from '@orpc/client';
import { Value } from '@orpc/shared';
import { T as TraverseContractProcedureCallbackOptions } from './server.Cb6yD7DZ.js';

interface StandardRPCMatcherOptions {
    /**
     * Filter procedures. Return `false` to exclude a procedure from matching.
     *
     * @default true
     */
    filter?: Value<boolean, [options: TraverseContractProcedureCallbackOptions]>;
}
declare class StandardRPCMatcher implements StandardMatcher {
    private readonly filter;
    private readonly tree;
    private pendingRouters;
    constructor(options?: StandardRPCMatcherOptions);
    init(router: AnyRouter, path?: readonly string[]): void;
    match(_method: string, pathname: HTTPPath): Promise<StandardMatchResult>;
}

interface StandardRPCHandlerOptions<T extends Context> extends StandardHandlerOptions<T>, StandardRPCJsonSerializerOptions, StandardRPCMatcherOptions {
}
declare class StandardRPCHandler<T extends Context> extends StandardHandler<T> {
    constructor(router: Router<any, T>, options?: StandardRPCHandlerOptions<T>);
}

export { StandardRPCHandler as a, StandardRPCMatcher as c };
export type { StandardRPCHandlerOptions as S, StandardRPCMatcherOptions as b };
